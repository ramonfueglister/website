{
  "hash": "86f0b6b943b3777f7c0c148eccd861a3",
  "result": {
    "markdown": "---\ntitle: \"1. Einen Webscrapper für OpenOLAT basteln\"\nauthor: \"Ramon Füglister\"\ndate: \"2024-04-03\"\ncategories: [news]\n---\n\n\nThis is the first post in a Quarto blog. Welcome!\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nNew names:\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Diese Funktion gibt alle Spaltennamen im Dataframe \"data\" zurück, die den Teilstring \"ZAG_00_Assessment_Sprache_und_Kommunikation\" enthalten und speichert sie in der Variable \"namen_items\".\nnamen_items <- names(data)[grep(\"ZAG_00_Assessment_Sprache_und_Kommunikation\", names(data))]\n\n# Diese Funktion entfernt alle Spalten, die in der Variable \"namen_items\" enthalten sind, aus dem Dataframe \"data\".\ndata <- data[, !names(data) %in% namen_items]\n\n\n# Diese Funktion setzt die Spaltennamen des Dataframes \"data\" auf die Werte in der ersten Zeile des Dataframes. \ncolnames(data) <- data[1,]\ndata <- data[-1,]\n\n# In dieser Schleife durchlaufen wir die in \"namen_items\" gespeicherten Namen der Items und ersetzen die Namen der Spalten \"Pkt\" durch die genaue Reihenfolge der Namen. Die Funktion grep() sucht nach dem Teilstring \"Pkt\" in den Spaltennamen und ersetzt ihn durch den aktuellen Namen des Items in der Schleife. Beachte, dass diese Schleife voraussetzt, dass die Namen in \"namen_items\" in der richtigen Reihenfolge sind und dass die Anzahl der \"Pkt\"-Spalten der Anzahl der Items in \"namen_items\" entspricht.\nfor (i in seq_along(namen_items)) {\n  colnames(data)[grep(\"Pkt\", colnames(data))] <- namen_items[i]\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n1+1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}